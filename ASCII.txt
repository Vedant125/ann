import numpy as np

# Step function that determines the output of the perceptron
def step_function(x):
    return 1 if x >= 0 else 0

# Training data: inputs are in ASCII form, labels represent even (1) or odd (0)
training_data = [
    {'input': [1, 1, 0, 0, 0, 0], 'label': 1},
    {'input': [1, 1, 0, 0, 0, 1], 'label': 0},
    {'input': [1, 1, 0, 0, 1, 0], 'label': 1},
    {'input': [1, 1, 0, 1, 1, 1], 'label': 0},
    {'input': [1, 1, 0, 1, 0, 0], 'label': 1},
    {'input': [1, 1, 0, 1, 0, 1], 'label': 0},
    {'input': [1, 1, 0, 1, 1, 0], 'label': 1},
    {'input': [1, 1, 0, 1, 1, 1], 'label': 0},
    {'input': [1, 1, 1, 0, 0, 0], 'label': 1},
    {'input': [1, 1, 1, 0, 0, 1], 'label': 0},
]

# Initialize weights and learning rate
weights = np.array([0.0, 0.0, 0.0, 0.0, 0.0, 0.0], dtype=float)  # Ensure weights are floating-point numbers
learning_rate = 0.1
num_epochs = 10  # Number of epochs for training

# Training the perceptron using the training data
for epoch in range(num_epochs):
    for data in training_data:
        inputs = np.array(data['input'], dtype=float)  # Convert inputs to floating-point numbers
        label = data['label']
        # Calculate perceptron output
        output = step_function(np.dot(inputs, weights))
        # Calculate error
        error = label - output
        # Update weights with the perceptron learning rule
        weights += learning_rate * error * inputs

# Test the perceptron
def predict(number):
    # Convert ASCII number to binary form
    ascii_value = ord(str(number)) - 48
    binary_representation = [(ascii_value >> i) & 1 for i in range(5, -1, -1)]
    # Predict using the perceptron
    result = step_function(np.dot(binary_representation, weights))
    return "Even" if result == 1 else "Odd"

# Test with all numbers 0 to 9
for i in range(10):
    print(f"Number {i} is {predict(i)}")
